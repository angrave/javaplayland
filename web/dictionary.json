{
	"Basic Syntax": {
		"Semicolons": {
			"SemColDef": "You separate most Java statements with a semicolon(;),\n<code>int x=5;\nSystem.out.print(x+10);\nreturn x>3;</code>.\nGotchas\nDon't add a semicolon after while, for or if. <code>int x=0;\nwhile(x<10)<b>;</b>\nx=x+1;\nSystem.out.println(\"The loop runs forever (x will always be zero)...\");</code>"
		}
		,
		"Brackets and Parentheses": {
			"BracketDef": "Java uses three kinds of brackets [] {} and () and they each mean something different. You need to use them in matching pairs. For example <tt>((1+2)/2</tt> is incomplete because it is missing the closing ). <li>Parentheses () are used to group mathematical expressions and also to call a method.</li><li>Calling a method may take no parameters (e.g. <tt>turnLeft()</tt>), or one or more parameters <tt>go(3) Math.max(2,3)</tt>.</li><li>\"Squiggly brackets\" {} are used to group a sequence of statements into a method, or group a sequence of statements to be used by a loop or if condition.</li><li>Square brackets [] are used to select an item from an array.</li>Gotchas\nMake sure you use the right one otherwise the compiler will get confused and complain."
		}
	}
	,
	"Variables": {
		"VarDef": "Java variables store something in memory and have a name so you can use it's value again later. There are two kinds primitives or references to an object (we will call them pointers). A primitive variable means the bit sequence stored in memory represents a value. Java supports a handful of primitive types, including int,boolean,char,float and double. These types tell the Java machine how to represent and store a value as bits. The boolean type can only store <tt>true</tt> or <tt>false</tt>. An int type can store an integer value between -two billion and +two billion.<br>Pointers are special.  They don't hold a value directly. Instead they store the memory address of where to find an object i.e. they point to another item in memory. Pointers can hold the special value <tt>null</tt> (meaning they don't point to anything) but primitives cannot. "
		,
		"Primitive Types" : {
		"Integer": {
			"IntDef": "Integer is a variable type that is used to store integer values<li><code>int x = 6;\nSystem.out.println(x);</code></li>This will create an integer variable x, and set its value to 6. It will then print out the value of x"
		}
		,
		"Double": {
			"DoubleDef": "Double is a variable type that is used to store floating-point numbers, also commonly known as decimal numbers<li><code>double temp = 3.14;\nSystem.out.println(temp);</code></li>This will create a double variable temp, and set its value to the decimal 3.14. It will then print out the value of temp"
		}
		,
		"Boolean": {
			"BoolDef": "Boolean is a variable type that is used to store one of two values, either <tt>true</tt> or <tt>false</tt><li><code>boolean bool = false;\nSystem.out.println(bool);</code></li>This will create a boolean variable bool, and set its value to <tt>false</tt>. It will then print out the value of bool"
		}
		} ,
		"Pointers": {
		"Arrays": {
		 	"ArrayDef": "An array pointer points to a sequence of values. For example, \n<code>int[] ptr = new int[] {1,2,3};</code>\n\nThis creates a new integer array and then initializes the variable 'ptr' to point to the new array."
		}
		,
		"String": {
			"StringDef": "A String pointer that is used to store a sequence of characters such as \"Hi\"\n<code>String s = \"Hello World!\";</code>\nThis will create a String variable s that <em>points to</em> the \"Hello World!\" object."
		}
		,
		"null": {
			"nullDef": "<tt>null</tt> is a special value you can use with pointer ('reference') variables.\n<code>String s = null;</code>\nThis creates a String variable named 's' that will be null meaning that it does not point to any particular String object."
		}
		}
	}
	,
	"Operators": {
		"Arithmetic Operators": {
			"ArithDef": "Java understands the basic rules of adding, subtracting and multiplying. So you can write <tt>2 + 2</tt>, <tt>5==3</tt> and it will calculate the result (<tt>4</tt> and <tt>false></tt> respectively)."
			,			
			"Division (/)": {
				"DivDef": "Basic mathematics division operation<li><code>4 / 2\n6.3 / 2.1</code></li>The above expressions will evaluate to 2 and 3.0 respectively"
			}
			,
			"Modules (%)": {
				"ModDef": "Performs a division operation, then retrieves the remainder from the the expression<li><tt>5 % 3\n6 % 3</tt></li>The above expressions will evaluate to 2 and 0 respectively"
			}
			,
			"Extra Notes": {
				"ArithExtraNotes": "Performing arithmetic operations on two integeres will result in an integer by truncating the solution when necessary.<li><tt>6 / 4\n10 / 4</tt></li>Although the above expressions should technically evaluate to 1.5 and 2.5 respectively, it will instead evaluate to 1 and 2 after truncating.<li>Performing arithmetic operations on two doubles will result in a double</li><li><tt>7.0 / 3.5\n3.0 * 2.0</tt></li>The above expressions will evaluate to 2.0 and 6.0 respectively.<li>Using arithmetic operations on an integer and a double will always result in a double</li><li><tt>3.0 / 4\n2.0 * 8</tt></li>The above expressions will evaluate to 0.75 and 16.0 respectively"
			}
		}
		,
		"Relational Operators": {
			"RelationalDef": "Relational Operators are used in expressions that will either evaluate to <tt>true</tt> or <tt>false</tt>"
			,
			"Equal to (==)": {
				"EqualToDef": "Evaluates to <tt>true</tt> if the two given objects are the same. Evaulates <tt>false</tt> otherwise<li><code>int var = 20;\nif(var == 20)\nSystem.out.println(\"Var is 20!\")</code></li>The code first assigns the value 20 to var, then checks and evaluates to see if var is indeed 20. Since it is, the boolean expression var == 20 will evaluate <tt>true</tt> and\"Var is 20!\" is printed"
			}
			,	
			"Not Equal to (!=)": {
				"NotEqualToDef": "Evaluates to <tt>true</tt> if the two given objects are different. Evaulates <tt>false</tt> otherwise<li><code>int size = 5;\nif(size != 10)\nSystem.out.println(\"Size is not 10!\")</code></li>The code first assigns the value of 5 to size, then checks and evaluates to see if size is not equal to 10. Since it is not equal to 10, the boolean expression will evaluate <tt>true</tt> and \"Size is not 10!\" is printed"
			}
			,
			"Greater than (>)": {
				"GreaterDef": "Evaluates <tt>true</tt> if first object is greater than the second object. Evaluates <tt>false</tt> otherwise<li><code>int speed = 25;\nif(speed > 30)\nSystem.out.println(\"Speed is fast!\")\nelse\nSystem.out.println(\"Speed is slow...\")</code></li>The code assigns 25 to speed, then checks to see if speed is greater than 50. Since it is not, the boolean expression will evaluate to <tt>false</tt> and \"Speed is slow...\" will be printed instead<li>\nNOTE: Take a look at the If else statements section under Conditionals if If else statements are confusing!"
			}
			,
			"Less than (<)": {
				"LessDef": "Evaluates <tt>true</tt> if the first object is less than second object. Evalautes <tt>false</tt> otherwise<li><code>int grade = 6;\nif(grade < 9)\nSystem.out.println(\"Not yet in high school\")</code></li>The code assigns 6 to grade, then checks and evaluates if grade is less than 9. Since it is, the boolean expression evaluates to <tt>true</tt> and \"Not yet in high school\" will be printed"
			}
			,
			"Greater than or equal to (>=)": {
				"GTETDef": "Evaluates <tt>true</tt> if the first object is greater than or equal to second object. Evaluates <tt>false</tt> otherwise<li><code>int height = 5;\nif(height >= 5)\nSystem.out.println(\"Not that short!\")</code></li>The code assigns 5 to height, then checks if height is greater than or equal to 5. Since it is equal, the boolean expression evaluates to <tt>true</tt> and \"Not that short!\" will be printed"
			}
			,
			"Less than or equal to (<=)": {
				"LTETDef": "Evaluates <tt>true</tt> if the first object is less than or equal to the second object. Evaulates <tt>false</tt> otherwise<li><code>int width = 3;\nif(width <= 4)\nSystem.out.println(\"Small width!\")</code></li>The code assigns 3 to width, then checks and evaluates if width is less than or equal to 4. Since it is, then boolean expression evaluates to <tt>false</tt> and prints \"Small width!\""
			}
		}
		,
		"Logical Operators": {
			"LogicalDef": "Logical operators are applied to multiple boolean expressions to form compound boolean expressions that evaluates to either <tt>true</tt> or <tt>false</tt>"
			,
			"NOT (!)": {
				"NotDef": "Negates the given boolean value. Evaluates to <tt>true</tt> if the given boolean expression is initially <tt>false</tt>. Evaluate <tt>false</tt> if the initial value is <tt>true</tt><li><code>boolean found = false;\nif(!found)\nSystem.out.println(\"Found it!\")</code></li>The code assigns <tt>false</tt> to found, then negates it so the boolean expression evaluates to <tt>true</tt> so that \"Found it!\" will be printed"
			}
			,
			"AND (&&)": {
				"AndDef": "Evaluates to <tt>true</tt> if all given boolean expressions connected by the AND operator evaluates to <tt>true</tt>. Evaluates <tt>false</tt> if there is at least one expression that evaluates <tt>false</tt><li><code>int x = 3;\nboolean y = false;\nif(x < 5 && !)\nSystem.out.println(\"All true!\")</code></li>The code assigns 3 to x, and <tt>false</tt> to y. Then it checks the boolean expression and since both expressions evaluate to <tt>true</tt>, the overall boolean will evaluate to <tt>true</tt>"
			}
			,
			"OR (||)": {
				"OrDef": "Evaluates to <tt>true</tt> if at least one of the given boolean expressions evaluate to <tt>true</tt>. Evaluates <tt>false</tt> if every boolean expression is <tt>false</tt><li><code>int x = 3;\nboolean y = false;\nif(x > 2 || y)\nSystem.out.println(\"Still true!\")</code></li>The code above assigns 3 to x, and <tt>false</tt> to y. Then it checks the boolean expression and since at least one expression is <tt>true</tt> (x > 2), the overall boolean will evaluate to <tt>true</tt>"
			}
			,
			"Extra Notes": {
				"LogicalExtraNotesDef": "If there is a combination of logical operators, evaluate them one at a time, from left to right\n\nint x = 10;\nboolean y = false;\nint z = 15;\nif(x < 11 && y == true || z > 10)\n\nIn the code above, the first boolean expression, x < 11 will evaluate to true. THe second boolean expression will evaluate to false, since y is false. Since the first two boolean expressions are combined with an AND operator, that makes the first two compound expression evaluate to false. The third boolean expression, z > 10 is true, and since the first two compound expressions are linked to the third with an OR operator, the overall expression will evaluate to true"
			}
		}
	}
	,
	"Conditionls": {
		"CondDef": "Selection control structure that enables decision-making ability in a program based on certain pre-defined conditions"
		,
		"If else statements": {
			"IfElseDef": "Conditions given to a program to execute selected commands\n\nint x = 6;\nif(x == 6)\n\tSystem.out.println(\"1\");\nelse if(x == 5)\n\tSystem.out.println(\"2\");\nelse\n\tSystem.out.println(\"3\");\n\nIn the code above, 1 will be printed because since x is 6, it satisfies the if condition, so only the codes immediately following the if statement will be executed, and the else if and else will be ignored. If x was assigned to be 5 however, the if statement will first be ignored, and when it comes to the else if, since it satisfies the condition, 2 will be printed and the else statement will be ignored. Lastly, if x was assigned to be any other value other than 6 and 5, the if and else if statements will be ignored, and upon reaching the else statement, the else statement accepts any value not accepted by preceding if and else if statements, so 4 will be printed"
		}
		,
		"Loops": {
			"LoopDef": "Performs certain commands multiple times based on a certain condition"
			,
			"For Loops": {
				"ForDef": "Given a variable, increments or decrement the variable by a certain amount until it reaches a certain condition, while during that process, everytime a changes, certain lines of codes are executed\n\nfor(int i = 0; i < 10; i++)\n\tSystem.out.print(\"i\");\n\nIn the code above, the integer i is first initialized to be 0. THen it checks and see if i is less than 10. Since it is, it goes into the body of the for loop, and executes the System.out.print statement. Then it increments i by 1, and checks the condition i < 10 again. Then the loop will repeat itself until the condition fails, where it will then exit the loop. So \"0123456789\" will be printed"
			}
			,
			"While Loops": {
				"WhileDef": "Given a certain condition, perform certain commands multiple times<pre>\n\nint x = 0;\nwhile(x < 10)\n{\tSystem.out.print(x);\n\tx=x+1;\n}\n</pre>In the code above, x is declared as 0, then it will check if x is less than 10. Each time round the loop it will print the x value and increment x by 1. The While loop will repeat this code until x is 10. So \"123456789\" will be printed"
			}
		}
	}
}
