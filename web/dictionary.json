{
	"Basic Syntax": {
		"Semicolons": {
			"SemColDef": "The end of all Java codes will typically end with a semicolon(;), with several exceptions such as loops or conditional statements\n\nint x = 2;\ny = x + 7;\nreturn x;"
		}
		,
		"Brackets": {
			"BracketDef": "Whenever there is a open bracket (left bracket) to contain certain lines of code, there must be a close bracket (right bracket) to compliment and contain the lines of code\n\nif(x > 5) {\n\tif(y < 6) {\n\t\treturn x+y;\n\t}\n}"
		}
	}
	,
	"Variables": {
		"VarDef": "Variables in Java are essentially the same as variables in mathematics in the sense that they are used to represent a value"
		,
		"Integer": {
			"IntDef": "Integer is a variable type that is used to store integer values\n\nint x = 6;\n\nThis will create an int variable x, and set its value to the integer 6"
		}
		,
		"Double": {
			"DoubleDef": "Double is a variable typn that is used to store floating-point numbers, also commonly known as decimal numbers\n\ndouble tempDoub = 3.14;\n\nThis will create a double variable tempDoub, and set its value to the decimal 3.14"
		}
		,
		"Boolean": {
			"BoolDef": "Boolean is a variable type that is used to store one of two values, either true or false\n\nboolean bool = false;\n\nThis will create a boolean variable bool, and set its value to false"
		}
		,
		"String": {
			"StringDef": "String is a variable type that is used to store a sequence of characters or numbers\n\nString s = \"Hello World!\";\n\nThis will create a String variable s that will store the value \"Hello World!\""
		}
		,
		"Null": {
			"NullDef": "Null is the default value that will be set to any uninitialized variables\n\nint y;\n\nThis will create an int variable y that will be null since it is not initialized"
		}
	}
	,
	"Operators": {
		"Arithmetic Operators": {
			"ArithDef": "Mathematics operators used for integers and doubles"
			,
			"Addition (+)": {
				"AddDef": "Basic mathematics addition operation\n\n3 + 4 ---> 7\n2.5 + 3.5 ---> 6.0"
			}
			,
			"Subtration (-)": {
				"SubDef": "Basic mathematics subtraction operation\n\n3 - 4 ---> -1\n3.6 - 2.3 ---> 1.3"
			}
			,
			"Multiplication (*)": {
				"MultDef": "Basic mathematics multiplication operation\n\n3 * 4 ---> 12\n2.2 * 3.3 ---> 7.26"
			}
			,
			"Division (/)": {
				"DivDef": "Basic mathematics division operation\n\n4/2 ---> 2\n6.3/2.1 ---> 3.0"
			}
			,
			"Modules (%)": {
				"ModDef": "Gives the remainder from a division operation\n\n5 % 3 ---> 2\n6 % 3 ---> 0"
			}
			,
			"Extra Notes": {
				"ArithExtraNotes": "Performing arithmetic operations on two integeres will result in an integer by truncating the solution when necessary, while performing arithmetic operations on two doubles will result in a double\n\n6 / 4 ---> 1\n\nThe above solution is equal to 1 because although 6/4 is technically equal to 1.5, since both 6 and 4 are integers, the solution must also be an integer and therefore is truncated to 1\n\n7.0 / 3.5 ---> 2.0\n\nThe above solution is equal to 2.0 because although the solution could technically be just 2, since both 7.0 and 3.5 are doubles, the solution must also be a double\n\nUsing arithmetic operations on an integer and a double will result in a double\n\n3.0 / 4 ---> 0.75"
			}
		}
		,
		"Relational Operators": {
			"RelationalDef": "Relational Operators are used in expressions that will either evaluate to true or false"
			,
			"Equal to (==)": {
				"EqualToDef": "Evaluates to true if the two given objects are the same, false otherwise\n\nint var = 20;\nif(var == 20)\n\nThe code above first assigns the value 20 to var, then checks and evaluates to see if var is indeed 20. Since it is, the boolean expression var == 20 will evaluate true"
			}
			,
			"Not Equal to (!=)": {
				"NotEqualToDef": "Evaluates to true if the two given objects are different, false otherwise\n\nint size = 5;\nif(size != 10)\n\nThe code above first assigns the value of 5 to size, then checks and evaluates to see if size is not equal to 10. Since it is not equal to 10, the boolean expression will evaluate true"
			}
		}

	}
}
