// Generated by CoffeeScript 1.8.0
(function() {
  "use strict";
  var bs_cl, commandCompletions, commands, controller, defaultFile, editor, fileNameCompletions, longestCommmonPrefix, onResize, preload, process_bytecode, progress, read_classfile, read_dir, root, stdout, tabComplete, user_input,
    __slice = [].slice;

  root = this;

  stdout = null;

  user_input = null;

  controller = null;

  editor = null;

  progress = null;

  bs_cl = null;

  preload = function() {
    return node.fs.readFile("/sys/preload.tar", function(err, data) {
      var xhrfs;
      if (err) {
        console.error("Error downloading preload.tar: " + err);
        return;
      }
      xhrfs = node.fs.getRootFS().mntMap["/sys"];
      return untar(new util.BytesArray(data), (function(percent, path, file) {
        var e;
        if (path[0] !== '/') {
          path = "/" + path;
        }
        try {
          if (file.length > 0) {
            return xhrfs.preloadFile(path, file);
          }
        } catch (_error) {
          e = _error;
          return console.error("Error writing " + path + ": " + e);
        }
      }));
    });
  };

  read_classfile = function(cls, cb, failure_cb) {
    var data, e, fullpath, path, _i, _len, _ref;
    cls = cls.slice(1, -1);
    _ref = jvm.system_properties['java.class.path'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      path = _ref[_i];
      fullpath = "" + path + cls + ".class";
      try {
        data = util.bytestr_to_array(node.fs.readFileSync(fullpath));
      } catch (_error) {
        e = _error;
        data = null;
      }
      if (data != null) {
        return cb(data);
      }
    }
    return failure_cb(function() {
      throw new Error("Error: No file found for class " + cls + ".");
    });
  };

  process_bytecode = function(bytecode_string) {
    var bytes_array;
    bytes_array = util.bytestr_to_array(bytecode_string);
    return new ClassData.ReferenceClassData(bytes_array);
  };

  onResize = function() {
    $('#console').height($(window).height() * 0.7);
    return $('#source').height($(window).height() * 0.7);
  };

  $(window).resize(onResize);

  $(document).ready(function() {
    var close_editor, jqconsole;
    onResize();
    editor = $('#editor');
    $('#file').change(function(ev) {
      var f, file_fcn, files_uploaded, num_files, _i, _len, _ref;
      if (typeof FileReader === "undefined" || FileReader === null) {
        controller.message("Your browser doesn't support file loading.\nTry using the editor to create files instead.", "error");
        return $('#console').click();
      }
      num_files = ev.target.files.length;
      files_uploaded = 0;
      controller.message("Uploading " + num_files + " files...\n", 'success', true);
      file_fcn = (function(f) {
        var ext, isClass, reader;
        reader = new FileReader;
        reader.onerror = function(e) {
          switch (e.target.error.code) {
            case e.target.error.NOT_FOUND_ERR:
              return alert("404'd");
            case e.target.error.NOT_READABLE_ERR:
              return alert("unreadable");
            case e.target.error.SECURITY_ERR:
              return alert("only works with --allow-file-access-from-files");
          }
        };
        ext = f.name.split('.')[1];
        isClass = ext === 'class';
        reader.onload = function(e) {
          files_uploaded++;
          node.fs.writeFileSync(node.process.cwd() + '/' + f.name, e.target.result);
          controller.message("[" + files_uploaded + "/" + num_files + "] File '" + f.name + "' saved.\n", 'success', files_uploaded !== num_files);
          if (isClass) {
            if (typeof editor.getSession === "function") {
              editor.getSession().setValue("/*\n * Binary file: " + f.name + "\n */");
            }
          } else {
            if (typeof editor.getSession === "function") {
              editor.getSession().setValue(e.target.result);
            }
          }
          return $('#console').click();
        };
        if (isClass) {
          return reader.readAsBinaryString(f);
        } else {
          return reader.readAsText(f);
        }
      });
      _ref = ev.target.files;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        file_fcn(f);
      }
    });
    jqconsole = $('#console');
    controller = jqconsole.console({
      promptLabel: 'doppio > ',
      commandHandle: function(line) {
        var a, args, cmd, e, handler, _ref;
        _ref = line.trim().split(/\s+/), cmd = _ref[0], args = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
        if (cmd === '') {
          return true;
        }
        handler = commands[cmd];
        try {
          if (handler != null) {
            return handler((function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = args.length; _i < _len; _i++) {
                a = args[_i];
                if (a.length > 0) {
                  _results.push(a.trim());
                }
              }
              return _results;
            })());
          } else {
            return "Unknown command '" + cmd + "'. Enter 'help' for a list of commands.";
          }
        } catch (_error) {
          e = _error;
          return controller.message(e.toString(), 'error');
        }
      },
      tabComplete: tabComplete,
      autofocus: false,
      animateScroll: true,
      promptHistory: true,
      welcomeMessage: "Welcome to Doppio! You may wish to try the following Java programs:\n  java classes/test/FileRead\n  java classes/demo/Fib <num>\n  java classes/demo/Chatterbot\n  java classes/demo/RegexTestHarness\n  java classes/demo/GzipDemo c Hello.txt hello.gz (compress)\n  java classes/demo/GzipDemo d hello.gz hello.tmp (decompress)\n  java classes/demo/DiffPrint Hello.txt hello.tmp\n\nWe support the stock Sun Java Compiler:\n  javac classes/test/FileRead.java\n  javac classes/demo/Fib.java\n\n(Note: if you edit a program and recompile with javac, you'll need\n  to run 'clear_cache' to see your changes when you run the program.)\n\nWe can run Rhino, the Java-based JS engine:\n  rhino\n\nText files can be edited by typing `edit [filename]`.\n\nYou can also upload your own files using the uploader above the top-right\ncorner of the console.\n\nEnter 'help' for full a list of commands. Ctrl-D is EOF.\n\nDoppio has been tested with the latest versions of the following desktop browsers:\n  Chrome, Safari, Firefox, Opera, Internet Explorer 10, and Internet Explorer 9."
    });
    stdout = function(str) {
      return controller.message(str, '', true);
    };
    user_input = function(resume) {
      var oldHandle, oldPrompt;
      oldPrompt = controller.promptLabel;
      controller.promptLabel = '';
      controller.reprompt();
      oldHandle = controller.commandHandle;
      return controller.commandHandle = function(line) {
        var i, __;
        controller.commandHandle = oldHandle;
        controller.promptLabel = oldPrompt;
        if (line === '\0') {
          return resume(0);
        } else {
          line += "\n";
          return resume((function() {
            var _i, _len, _results;
            _results = [];
            for (i = _i = 0, _len = line.length; _i < _len; i = ++_i) {
              __ = line[i];
              _results.push(line.charCodeAt(i));
            }
            return _results;
          })());
        }
      };
    };
    close_editor = function() {
      return $('#ide').fadeOut('fast', function() {
        return $('#console').fadeIn('fast').click();
      });
    };
    $('#save_btn').click(function(e) {
      var contents, fname;
      fname = $('#filename').val();
      contents = editor.getSession().getValue();
      if (contents[contents.length - 1] !== '\n') {
        contents += '\n';
      }
      node.fs.writeFileSync(fname, contents);
      controller.message("File saved as '" + fname + "'.", 'success');
      close_editor();
      return e.preventDefault();
    });
    $('#close_btn').click(function(e) {
      close_editor();
      return e.preventDefault();
    });
    bs_cl = new ClassLoader.BootstrapClassLoader(read_classfile);
    return preload();
  });

  read_dir = function(dir, pretty, columns) {
    var c, col, col_size, column_list, contents, i, max_len, num_cols, pretty_list, row, row_list, rpad, _i, _j, _k, _len;
    if (pretty == null) {
      pretty = true;
    }
    if (columns == null) {
      columns = true;
    }
    contents = node.fs.readdirSync(dir).sort();
    if (!pretty) {
      return contents.join('\n');
    }
    pretty_list = [];
    max_len = 0;
    for (_i = 0, _len = contents.length; _i < _len; _i++) {
      c = contents[_i];
      if (node.fs.statSync(dir + '/' + c).isDirectory()) {
        c += '/';
      }
      if (c.length > max_len) {
        max_len = c.length;
      }
      pretty_list.push(c);
    }
    if (!columns) {
      return pretty_list.join('\n');
    }
    num_cols = (100 / (max_len + 1)) | 0;
    col_size = Math.ceil(pretty_list.length / num_cols);
    column_list = [];
    for (_j = 1; 1 <= num_cols ? _j <= num_cols : _j >= num_cols; 1 <= num_cols ? _j++ : _j--) {
      column_list.push(pretty_list.splice(0, col_size));
    }
    row_list = [];
    rpad = function(str, len) {
      return str + Array(len - str.length + 1).join(' ');
    };
    for (i = _k = 0; 0 <= col_size ? _k < col_size : _k > col_size; i = 0 <= col_size ? ++_k : --_k) {
      row = (function() {
        var _l, _len1, _results;
        _results = [];
        for (_l = 0, _len1 = column_list.length; _l < _len1; _l++) {
          col = column_list[_l];
          if (col[i] != null) {
            _results.push(rpad(col[i], max_len + 1));
          }
        }
        return _results;
      })();
      row_list.push(row.join(''));
    }
    return row_list.join('\n');
  };

  commands = {
    javac: function(args, cb) {
      var rs;
      jvm.set_classpath('/home/doppio/vendor/classes/', './:/home/doppio');
      rs = new runtime.RuntimeState(stdout, user_input, bs_cl);
      jvm.run_class(rs, 'classes/util/Javac', args, function() {
        var c, _i, _len;
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          c = args[_i];
          if (c.match(/\.java$/)) {
            bs_cl.remove_class(util.int_classname(c.slice(0, -5)));
          }
        }
        return controller.reprompt();
      });
      return null;
    },
    java: function(args, cb) {
      var class_args, class_name, rs;
      if ((args[0] == null) || (args[0] === '-classpath' && args.length < 3)) {
        return "Usage: java [-classpath path1:path2...] class [args...]";
      }
      if (args[0] === '-classpath') {
        jvm.set_classpath('/home/doppio/vendor/classes/', args[1]);
        class_name = args[2];
        class_args = args.slice(3);
      } else {
        jvm.set_classpath('/home/doppio/vendor/classes/', './');
        class_name = args[0];
        class_args = args.slice(1);
      }
      rs = new runtime.RuntimeState(stdout, user_input, bs_cl);
      jvm.run_class(rs, class_name, class_args, function() {
        return controller.reprompt();
      });
      return null;
    },
    test: function(args) {
      if (args[0] == null) {
        return "Usage: test all|[class(es) to test]";
      }
      if (args[0] === 'all') {
        testing.run_tests([], stdout, true, false, true, function() {
          return controller.reprompt();
        });
      } else {
        testing.run_tests(args, stdout, false, false, true, function() {
          return controller.reprompt();
        });
      }
      return null;
    },
    javap: function(args) {
      var e, raw_data;
      if (args[0] == null) {
        return "Usage: javap class";
      }
      try {
        raw_data = node.fs.readFileSync("" + args[0] + ".class");
      } catch (_error) {
        e = _error;
        return ["Could not find class '" + args[0] + "'.", 'error'];
      }
      return disassembler.disassemble(process_bytecode(raw_data));
    },
    rhino: function(args, cb) {
      var rs;
      jvm.set_classpath('/home/doppio/vendor/classes/', './');
      rs = new runtime.RuntimeState(stdout, user_input, bs_cl);
      jvm.run_class(rs, 'com/sun/tools/script/shell/Main', args, function() {
        return controller.reprompt();
      });
      return null;
    },
    list_cache: function() {
      var cached_classes;
      cached_classes = bs_cl.get_loaded_class_list(true);
      return '  ' + cached_classes.sort().join('\n  ');
    },
    clear_cache: function() {
      bs_cl = new ClassLoader.BootstrapClassLoader(jvm.read_classfile);
      return true;
    },
    ls: function(args) {
      var d;
      if (args.length === 0) {
        return read_dir('.');
      } else if (args.length === 1) {
        return read_dir(args[0]);
      } else {
        return ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = args.length; _i < _len; _i++) {
            d = args[_i];
            _results.push("" + d + ":\n" + (read_dir(d)) + "\n");
          }
          return _results;
        })()).join('\n');
      }
    },
    edit: function(args) {
      var data, e;
      try {
        data = args[0] != null ? node.fs.readFileSync(args[0]) : defaultFile;
      } catch (_error) {
        e = _error;
        data = defaultFile;
      }
      $('#console').fadeOut('fast', function() {
        var JavaMode, TextMode, ext, _ref;
        $('#filename').val(args[0]);
        $('#ide').fadeIn('fast');
        editor = ace.edit('source');
        ext = (_ref = args[0]) != null ? _ref.split('.')[1] : void 0;
        if (ext === 'java' || (args[0] == null)) {
          JavaMode = require("ace/mode/java").Mode;
          editor.getSession().setMode(new JavaMode);
        } else {
          TextMode = require("ace/mode/text").Mode;
          editor.getSession().setMode(new TextMode);
        }
        return editor.getSession().setValue(data);
      });
      return true;
    },
    cat: function(args) {
      var e, fname;
      fname = args[0];
      if (fname == null) {
        return "Usage: cat <file>";
      }
      try {
        return node.fs.readFileSync(fname);
      } catch (_error) {
        e = _error;
        return "ERROR: " + fname + " does not exist.";
      }
    },
    mv: function(args) {
      var e;
      if (args.length < 2) {
        return "Usage: mv <from-file> <to-file>";
      }
      try {
        node.fs.renameSync(args[0], args[1]);
      } catch (_error) {
        e = _error;
        return "Invalid arguments.";
      }
      return true;
    },
    cd: function(args) {
      var e;
      if (args.length > 1) {
        return "Usage: cd <directory>";
      }
      if (args.length === 0) {
        args.push("~");
      }
      try {
        node.process.chdir(args[0]);
      } catch (_error) {
        e = _error;
        return "Invalid directory.";
      }
      return true;
    },
    rm: function(args) {
      var fname, fnames, fstat, _i, _len;
      if (args[0] == null) {
        return "Usage: rm <file>";
      }
      if (args[0] === '*') {
        fnames = node.fs.readdirSync('.');
        for (_i = 0, _len = fnames.length; _i < _len; _i++) {
          fname = fnames[_i];
          fstat = node.fs.statSync(fname);
          if (fstat.is_directory) {
            return "ERROR: '" + fname + "' is a directory.";
          }
          node.fs.unlinkSync(fname);
        }
      } else {
        node.fs.unlinkSync(args[0]);
      }
      return true;
    },
    emacs: function() {
      return "Try 'vim'.";
    },
    vim: function() {
      return "Try 'emacs'.";
    },
    time: function(args) {
      var start;
      start = (new Date).getTime();
      console.profile(args[0]);
      controller.onreprompt = function() {
        var end;
        controller.onreprompt = null;
        console.profileEnd();
        end = (new Date).getTime();
        return controller.message("\nCommand took a total of " + (end - start) + "ms to run.\n", '', true);
      };
      return commands[args.shift()](args);
    },
    profile: function(args) {
      var count, duration, runs, time_once;
      count = 0;
      runs = 5;
      duration = 0;
      time_once = function() {
        var start;
        start = (new Date).getTime();
        controller.onreprompt = function() {
          var end;
          if (!(count < runs)) {
            controller.onreprompt = null;
            controller.message("\n" + args[0] + " took an average of " + (duration / runs) + "ms.\n", '', true);
            return;
          }
          end = (new Date).getTime();
          if (count++ === 0) {
            return time_once();
          }
          duration += end - start;
          return time_once();
        };
        return commands[args.shift()](args);
      };
      return time_once();
    },
    help: function(args) {
      return "Ctrl-D is EOF.\n\nJava-related commands:\n  javac <source file>    -- Invoke the Java 6 compiler.\n  java <class> [args...] -- Run with command-line arguments.\n  javap <class>          -- Display disassembly.\n  time                   -- Measure how long it takes to run a command.\n  rhino                  -- Run Rhino, the Java-based JavaScript engine.\n\nFile management:\n  cat <file>             -- Display a file in the console.\n  edit <file>            -- Edit a file.\n  ls <dir>               -- List files.\n  mv <src> <dst>         -- Move / rename a file.\n  rm <file>              -- Delete a file.\n  cd <dir>               -- Change current directory.\n\nCache management:\n  list_cache             -- List the cached class files.\n  clear_cache            -- Clear the cached class files.";
    }
  };

  tabComplete = function() {
    var args, getCompletions, prefix, promptText;
    promptText = controller.promptText();
    args = promptText.split(/\s+/);
    getCompletions = function(args) {
      if (args.length === 1) {
        return commandCompletions(args[0]);
      } else if (args[0] === 'time') {
        return getCompletions(args.slice(1));
      } else {
        return fileNameCompletions(args[0], args);
      }
    };
    prefix = longestCommmonPrefix(getCompletions(args));
    if (prefix === '') {
      return;
    }
    promptText = promptText.substr(0, promptText.length - util.last(args).length);
    return controller.promptText(promptText + prefix);
  };

  commandCompletions = function(cmd) {
    var handler, name, _results;
    _results = [];
    for (name in commands) {
      handler = commands[name];
      if (name.substr(0, cmd.length) === cmd) {
        _results.push(name);
      }
    }
    return _results;
  };

  fileNameCompletions = function(cmd, args) {
    var chopExt, completions, dirList, dirPfx, e, isDir, item, lastSlash, searchPfx, toComplete, validExtension, _i, _len, _ref;
    validExtension = function(fname) {
      var dot, ext;
      dot = fname.lastIndexOf('.');
      ext = dot === -1 ? '' : fname.slice(dot + 1);
      if (cmd === 'javac') {
        return ext === 'java';
      } else if (cmd === 'javap' || cmd === 'java') {
        return ext === 'class';
      } else {
        return true;
      }
    };
    chopExt = args.length === 2 && (cmd === 'javap' || cmd === 'java');
    toComplete = util.last(args);
    lastSlash = toComplete.lastIndexOf('/');
    if (lastSlash >= 0) {
      dirPfx = toComplete.slice(0, lastSlash + 1);
      searchPfx = toComplete.slice(lastSlash + 1);
    } else {
      dirPfx = '';
      searchPfx = toComplete;
    }
    try {
      dirList = node.fs.readdirSync(dirPfx === '' ? '.' : dirPfx);
      dirList.push('..');
      dirList.push('.');
    } catch (_error) {
      e = _error;
      return [];
    }
    completions = [];
    for (_i = 0, _len = dirList.length; _i < _len; _i++) {
      item = dirList[_i];
      isDir = (_ref = node.fs.statSync(dirPfx + item)) != null ? _ref.isDirectory() : void 0;
      if (!(validExtension(item) || isDir)) {
        continue;
      }
      if (item.slice(0, searchPfx.length) === searchPfx) {
        if (isDir) {
          completions.push(dirPfx + item + '/');
        } else if (cmd !== 'cd') {
          completions.push(dirPfx + (chopExt ? item.split('.', 1)[0] : item));
        }
      }
    }
    return completions;
  };

  longestCommmonPrefix = function(lst) {
    return lst.join(' ').match(/^(\S*)\S*(?: \1\S*)*$/i)[1];
  };

  defaultFile = "class Test {\n  public static void main(String[] args) {\n    // enter code here\n  }\n}";

}).call(this);
