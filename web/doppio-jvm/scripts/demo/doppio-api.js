// Generated by CoffeeScript 1.8.0
(function() {
  "use strict";
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.DoppioApi = (function() {

    /*
        A class to interact with doppio with.
        Please do not call the constructor until the entire document has loaded
        (this is usually accomplished with jQuery(document).onReady)
     */
    function DoppioApi(stdout, done_cb2, progress_cb) {
      var done_cb1, stdin;
      this.stdout = stdout;
      this.abort = __bind(this.abort, this);
      this.run = __bind(this.run, this);
      this.output = __bind(this.output, this);

      /*
          Sets up Doppio environment.
          @stdout (msg) ->
              A function that will receive messages from the executing java code.
          @log (msg) ->
              A function that will receive log messages such as total execution
              time or abort requests. Set to null to disable logging.
       */
      stdin = function() {
        return "\n";
      };
      this.running = false;
      this.preloaded = false;
      done_cb1 = (function(_this) {
        return function() {
          _this.bs_cl = new ClassLoader.BootstrapClassLoader(jvm.read_classfile);
          jvm.set_classpath('/sys/vendor/classes', '/tmp/');
          _this.rs = new runtime.RuntimeState(_this.output, stdin, _this.bs_cl);
          return typeof done_cb2 === "function" ? done_cb2() : void 0;
        };
      })(this);
      console.log("1.1");
      this.load_mini_rt(done_cb1, progress_cb);
      console.log("1.2");
      return;
    }

    DoppioApi.prototype.setOutputFunctions = function(stdout, log) {
      this.log = log;
      if (!this.running) {
        this.stdout = stdout;
      } else {
        if (typeof console !== "undefined" && console !== null) {
          console.log('Currently running');
        }
        if (!this.updateOutput) {
          if (typeof console !== "undefined" && console !== null) {
            console.log('Will update output when finished');
          }
          this.updateOutput = stdout;
        }
      }
    };

    DoppioApi.prototype.output = function(msg) {
      if (this.stdout != null) {
        this.stdout(msg);
      }
    };

    DoppioApi.prototype.load_mini_rt = function(done_cb, progress_cb) {
      console.log("Loading stuff");

      /*
          Loads the compressed pre-compiled java classes for Doppio
       */
      node.fs.readFile("/sys/preload.tar", function(err, data) {
        var write_one_file, xhrfs;
        if (err) {
          console.error("Error downloading preload.tar: " + err);
          return;
        }
        xhrfs = node.fs.getRootFS().mntMap["/sys"];
        write_one_file = function(percent, path, file) {
          var e;
          if (typeof progress_cb === "function") {
            progress_cb(percent);
          }
          if (path[0] !== '/') {
            path = "/" + path;
          }
          try {
            if (file.length > 0) {
              return xhrfs.preloadFile(path, file);
            }
          } catch (_error) {
            e = _error;
            return console.error("Error writing " + path + ": " + e);
          }
        };
        return untar(new util.BytesArray(data), write_one_file, done_cb);
      });
    };

    DoppioApi.prototype.run = function(studentCode, gameContext, finished_cb) {

      /*
          Runs the given Java Code.
       */
      var class_args, finish_cb, start_time;
      if (this.running) {
        if (this.preloaded) {
          if (typeof console !== "undefined" && console !== null) {
            console.log('Already Running, not re-starting run');
          }
          finished_cb(false);
        } else {
          if (typeof console !== "undefined" && console !== null) {
            console.log('Not finished preloading, will run after preload finishes');
          }
          this.firstRun = this.run.bind(this, studentCode, gameContext, finished_cb);
        }
        return;
      }
      start_time = (new Date()).getTime();
      if (this.rs.is_abort_requested) {
        this.rs.abort_requested = null;
      }
      if (typeof console !== "undefined" && console !== null) {
        console.log('Starting Run');
      }
      class_args = [studentCode];
      finish_cb = (function(_this) {
        return function() {
          var end_time;
          end_time = (new Date()).getTime();
          if (_this.running) {
            if (typeof console !== "undefined" && console !== null) {
              console.log('Finished Run');
            }
            if (typeof console !== "undefined" && console !== null) {
              console.log("Took " + (end_time - start_time) + "ms.");
            }
            _this.running = false;
          }
          if (_this.updateOutput != null) {
            _this.setOutputFunctions(_this.updateOutput, _this.log);
            _this.updateOutput = null;
          }
          finished_cb(true);
        };
      })(this);
      this.running = true;
      if (gameContext) {
        jvm.run_class(this.rs, 'codemoo/RunGame', class_args, finish_cb);
      } else {
        jvm.run_class(this.rs, 'codemoo/Run', class_args, finish_cb);
      }
    };

    DoppioApi.prototype.preload = function(preloadFunctions, finished_cb) {
      var class_args, finish_cb, start_time;
      if (this.running) {
        if (typeof console !== "undefined" && console !== null) {
          console.log('Busy Running');
        }
        finished_cb(false);
        return;
      }
      if (typeof console !== "undefined" && console !== null) {
        console.log('Starting Preload');
      }
      class_args = [preloadFunctions];
      finish_cb = (function(_this) {
        return function() {
          var end_time;
          end_time = (new Date()).getTime();
          if (_this.running) {
            if (typeof console !== "undefined" && console !== null) {
              console.log('Preloading Finished');
            }
            if (typeof console !== "undefined" && console !== null) {
              console.log("Took " + (end_time - start_time) + "ms.");
            }
            _this.running = false;
          }
          if (_this.updateOutput != null) {
            _this.setOutputFunctions(_this.updateOutput, _this.log);
            _this.updateOutput = null;
          }
          finished_cb(true);
          _this.preloaded = true;
          if (_this.firstRun) {
            _this.firstRun();
            _this.firstRun = null;
          }
        };
      })(this);
      this.running = true;
      start_time = (new Date()).getTime();
      jvm.run_class(this.rs, 'codemoo/Preload', class_args, finish_cb);
    };

    DoppioApi.prototype.abort = function(finished_cb) {

      /*
          Abort the current run.
       */
      var cb;
      if (typeof console !== "undefined" && console !== null) {
        console.log('User Abort Requested');
      }
      if (this.running) {
        if (this.preloaded) {
          if (typeof console !== "undefined" && console !== null) {
            console.log('Aborting Run');
          }
          cb = function() {
            if (typeof console !== "undefined" && console !== null) {
              console.log('Aborted Successfully');
            }
            this.running = false;
            if (finished_cb != null) {
              return finished_cb();
            }
          };
          this.rs.async_abort(cb);
        } else {
          if (typeof console !== "undefined" && console !== null) {
            console.log('Cannot Abort Preloading');
          }
          if (finished_cb != null) {
            finished_cb();
          }
        }
      } else {
        if (typeof console !== "undefined" && console !== null) {
          console.log('No Run Detected');
        }
        if (finished_cb != null) {
          finished_cb();
        }
      }
    };

    return DoppioApi;

  })();

}).call(this);
