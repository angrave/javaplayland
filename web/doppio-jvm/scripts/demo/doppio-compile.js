// Generated by CoffeeScript 1.8.0
(function() {
  "use strict";
  var bs_cl, compileAndRun, controller, editor, init_editor, load_mini_rt, progress, root, stdout, user_input;

  root = this;

  stdout = null;

  user_input = null;

  controller = null;

  editor = null;

  progress = null;

  bs_cl = null;

  load_mini_rt = function() {
    return node.fs.readFile("/sys/preload.tar", function(err, data) {
      var xhrfs;
      if (err) {
        console.error("Error downloading preload.tar: " + err);
        return;
      }
      xhrfs = node.fs.getRootFS().mntMap["/sys"];
      return untar(new util.BytesArray(data), (function(percent, path, file) {
        var e;
        if (path[0] !== '/') {
          path = "/" + path;
        }
        try {
          if (file.length > 0) {
            return xhrfs.preloadFile(path, file);
          }
        } catch (_error) {
          e = _error;
          return console.error("Error writing " + path + ": " + e);
        }
      }));
    });
  };

  compileAndRun = function() {
    var class_args, cname, compile_finished_cb, contents, exec_finish_cb, fname, msg, stdin;
    fname = "Student.java";
    cname = fname.slice(0, -5);
    console.log(cname);
    contents = editor.getSession().getValue();
    root.saveFile(fname, contents);
    msg = '';
    stdout = function(str) {
      msg += str;
      console.log(str);
      return $('#messages').text(msg);
    };
    stdin = function() {
      return "\n";
    };
    class_args = [fname];
    exec_finish_cb = function() {
      root.rs = null;
      return console.log('Done');
    };
    compile_finished_cb = function() {
      root.rs = null;
      if (msg.length === 0) {
        return root.exec(stdout, stdin, cname, class_args, exec_finish_cb);
      }
    };
    return root.compile(stdout, fname, compile_finished_cb);
  };

  init_editor = function() {
    var JavaMode;
    editor = ace.edit('source');
    JavaMode = require("ace/mode/java").Mode;
    editor.getSession().setMode(new JavaMode());
    return editor.getSession().setValue("public class Student {\n  public static void main(String[]args) {\n    System.out.println(\"Args=\"+args[0]);\n  }\n}");
  };

  root.preload = function() {
    load_mini_rt();
    init_editor();
    root.bs_cl = new ClassLoader.BootstrapClassLoader(jvm.read_classfile);
    $('#run_btn').click(function(e) {
      compileAndRun();
      return e.preventDefault();
    });
    return $('#abort_btn').click(function(e) {
      var cb;
      console.log('abort button clicked');
      if (root.rs) {
        $('#messages').text('Stopping ...');
        cb = function() {
          return $('#messages').text('Stopped');
        };
        root.rs.async_abort(cb);
      } else {
        console.log('but nothing to do');
      }
      return e.preventDefault();
    });
  };

  $(document).ready(function() {
    return root.preload();
  });

  root.rs = null;

  root.saveFile = function(fname, contents) {
    if (contents[contents.length - 1] !== '\n') {
      contents += '\n';
    }
    node.fs.writeFileSync(fname, contents);
    return console.log("File saved as '" + fname + "'.");
  };

  root.compile = function(stdout, fname, finish_cb) {
    var args, my_cb, rs, start_compile, useECJ;
    $('#messages').text("Compiling " + fname + " ...");
    start_compile = (new Date()).getTime();
    jvm.set_classpath('/sys/vendor/classes/', './:/sys');
    user_input = function(resume) {
      return resume('');
    };
    rs = new runtime.RuntimeState(stdout, user_input, root.bs_cl);
    root.rs = rs;
    args = [fname];
    my_cb = function(success) {
      var end_compile;
      end_compile = (new Date()).getTime();
      root.rs = null;
      console.log("javac took a total of " + (end_compile - start_compile) + "ms.");
      if (success) {
        $('#messages').text('Compilation complete');
      } else {
        $('#messages').text('');
      }
      return finish_cb();
    };
    useECJ = false;
    if (useECJ) {
      jvm.system_properties['jdt.compiler.useSingleThread'] = true;
      jvm.run_class(rs, 'org/eclipse/jdt/internal/compiler/batch/Main', args, my_cb);
    } else {
      jvm.run_class(rs, 'classes/util/Javac', args, my_cb);
    }
  };

  root.exec = function(stdout, stdin, class_name, class_args, finish_cb) {
    var rs;
    $('#messages').text("Running " + class_name);
    rs = new runtime.RuntimeState(stdout, stdin, root.bs_cl);
    jvm.run_class(rs, class_name, class_args, finish_cb);
    $('#messages').text('');
  };

  root.abortjvm = function() {
    return alert('Abort! Abort! Not Yet..');
  };

}).call(this);
