// Generated by CoffeeScript 1.8.0
(function() {
  "use strict";
  var data, fs, octal2num, root, shift_file;

  root = this;

  root.untar = function(bytes, cb, done_cb) {
    var next_file;
    next_file = function() {
      var body, path, percent, _ref;
      _ref = shift_file(bytes), path = _ref[0], body = _ref[1];
      percent = bytes.pos() / bytes.size();
      cb(percent, path, body);
      if (bytes.peek() !== 0) {
        return root.asyncExecute(next_file);
      } else {
        return typeof done_cb === "function" ? done_cb() : void 0;
      }
    };
    return root.asyncExecute(next_file);
  };

  shift_file = function(bytes) {
    var file, fname, fullname, header, padding, prefix, size;
    header = bytes.read(512);
    fname = util.bytes2str(header.slice(0, 100), true);
    size = octal2num(header.slice(124, 124 + 11));
    prefix = util.bytes2str(header.slice(345, 345 + 155), true);
    fullname = prefix ? "" + prefix + "/" + fname : fname;
    padding = Math.ceil(size / 512) * 512 - size;
    file = bytes.slice(size);
    bytes.skip(padding);
    return [fullname, file];
  };

  octal2num = function(bytes) {
    var b, digit, idx, msd, num, _i, _len;
    num = 0;
    msd = bytes.length - 1;
    for (idx = _i = 0, _len = bytes.length; _i < _len; idx = ++_i) {
      b = bytes[idx];
      digit = parseInt(String.fromCharCode(b));
      num += digit * Math.pow(8, msd - idx);
    }
    return num;
  };

  if ((typeof module !== "undefined" && module !== null) && !module.parent) {
    fs = require('fs');
    data = new util.BytesArray(fs.readFileSync('/dev/stdin'));
    root.untar(data, function(percent, path, file) {
      return console.log(path);
    });
  }

}).call(this);
